Starting Terraform Deployment...
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of cloudflare/cloudflare from the dependency lock file
- Reusing previous version of hashicorp/aws from the dependency lock file
- Reusing previous version of hashicorp/local from the dependency lock file
- Using previously-installed cloudflare/cloudflare v3.35.0
- Using previously-installed hashicorp/aws v4.67.0
- Using previously-installed hashicorp/local v2.5.2

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_db_instance.myrds[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "myrds" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m db_name                               = (known after apply)
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "mysql"
      [32m+[0m[0m engine_version                        = "8.0.40"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "rdstf"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = (known after apply)
      [32m+[0m[0m name                                  = (known after apply)
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = "myrds-params"
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = "gp3"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name" = "MyRDS"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name" = "MyRDS"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = (sensitive value)
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # aws_db_parameter_group.myrds_params[0m will be created
[0m  [32m+[0m[0m resource "aws_db_parameter_group" "myrds_params" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Managed by Terraform"
      [32m+[0m[0m family      = "mysql8.0"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "myrds-params"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)

      [32m+[0m[0m parameter {
          [32m+[0m[0m apply_method = "immediate"
          [32m+[0m[0m name         = "character_set_server"
          [32m+[0m[0m value        = "utf8mb4"
        }
    }

[1m  # aws_instance.app_server[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "app_server" {
      [32m+[0m[0m ami                                  = "ami-00bb6a80f01f03502"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t2.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = "my-key"
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "My-server"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "My-server"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = (known after apply)
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device {
          [32m+[0m[0m delete_on_termination = true
          [32m+[0m[0m device_name           = (known after apply)
          [32m+[0m[0m encrypted             = (known after apply)
          [32m+[0m[0m iops                  = (known after apply)
          [32m+[0m[0m kms_key_id            = (known after apply)
          [32m+[0m[0m throughput            = (known after apply)
          [32m+[0m[0m volume_id             = (known after apply)
          [32m+[0m[0m volume_size           = 10
          [32m+[0m[0m volume_type           = "gp3"
        }
    }

[1m  # aws_security_group.TF_SG[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "TF_SG" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow web and SSH access"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "HTTP"
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "HTTPS"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "SSH"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = "security-group-ec2"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "EC2-SG"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "EC2-SG"
        }
      [32m+[0m[0m vpc_id                 = "vpc-035c6c65b2313705f"
    }

[1m  # aws_security_group.rds_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow EC2 to connect to RDS"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = []
              [32m+[0m[0m description      = "MySQL access from EC2"
              [32m+[0m[0m from_port        = 3306
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = (known after apply)
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3306
            },
        ]
      [32m+[0m[0m name                   = "rds-security-group"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "RDS-SG"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "RDS-SG"
        }
      [32m+[0m[0m vpc_id                 = "vpc-035c6c65b2313705f"
    }

[1m  # cloudflare_record.portfolio_subdomain[0m will be created
[0m  [32m+[0m[0m resource "cloudflare_record" "portfolio_subdomain" {
      [32m+[0m[0m allow_overwrite = false
      [32m+[0m[0m created_on      = (known after apply)
      [32m+[0m[0m hostname        = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m metadata        = (known after apply)
      [32m+[0m[0m modified_on     = (known after apply)
      [32m+[0m[0m name            = "harshal"
      [32m+[0m[0m proxiable       = (known after apply)
      [32m+[0m[0m proxied         = true
      [32m+[0m[0m ttl             = 1
      [32m+[0m[0m type            = "A"
      [32m+[0m[0m value           = (known after apply)
      [32m+[0m[0m zone_id         = "67e5602a2ca4cdf80baf8c2233a89ed0"
    }

[1m  # local_file.inventory[0m will be created
[0m  [32m+[0m[0m resource "local_file" "inventory" {
      [32m+[0m[0m content              = (known after apply)
      [32m+[0m[0m content_base64sha256 = (known after apply)
      [32m+[0m[0m content_base64sha512 = (known after apply)
      [32m+[0m[0m content_md5          = (known after apply)
      [32m+[0m[0m content_sha1         = (known after apply)
      [32m+[0m[0m content_sha256       = (known after apply)
      [32m+[0m[0m content_sha512       = (known after apply)
      [32m+[0m[0m directory_permission = "0777"
      [32m+[0m[0m file_permission      = "0777"
      [32m+[0m[0m filename             = "ansible/inventory.ini"
      [32m+[0m[0m id                   = (known after apply)
    }

[1mPlan:[0m 7 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m instance_public_ip = (known after apply)
  [32m+[0m[0m portfolio_url      = "http://harshal.purvesh.cloud"
  [32m+[0m[0m rds_endpoint       = (known after apply)
[0m[1maws_db_parameter_group.myrds_params: Creating...[0m[0m
[0m[1maws_security_group.TF_SG: Creating...[0m[0m
[0m[1maws_db_parameter_group.myrds_params: Creation complete after 3s [id=myrds-params][0m
[0m[1maws_security_group.TF_SG: Creation complete after 3s [id=sg-0e6d0ac324e9f1ca1][0m
[0m[1maws_security_group.rds_sg: Creating...[0m[0m
[0m[1maws_instance.app_server: Creating...[0m[0m
[0m[1maws_security_group.rds_sg: Creation complete after 3s [id=sg-07ae12b5d6d0e37ed][0m
[0m[1maws_db_instance.myrds: Creating...[0m[0m
[0m[1maws_instance.app_server: Still creating... [10s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [10s elapsed][0m[0m
[0m[1maws_instance.app_server: Creation complete after 14s [id=i-0f2607ba0ab0a33a4][0m
[0m[1mcloudflare_record.portfolio_subdomain: Creating...[0m[0m
[0m[1mlocal_file.inventory: Creating...[0m[0m
[0m[1mlocal_file.inventory: Creation complete after 0s [id=2c580cedc08198d2615431711c57b2294bd209b0][0m
[0m[1mcloudflare_record.portfolio_subdomain: Creation complete after 2s [id=a6da329c7142ba7a36874ea0623e4b81][0m
[0m[1maws_db_instance.myrds: Still creating... [20s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [30s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [40s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [50s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [1m0s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [1m10s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [1m20s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [1m30s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [1m40s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [1m50s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [2m0s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [2m10s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [2m20s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [2m30s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [2m40s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [2m50s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [3m0s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [3m10s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [3m20s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [3m30s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [3m40s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [3m50s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [4m0s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [4m10s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [4m20s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [4m30s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [4m40s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Still creating... [4m50s elapsed][0m[0m
[0m[1maws_db_instance.myrds: Creation complete after 4m58s [id=rdstf][0m
[0m[1m[32m
Apply complete! Resources: 7 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0minstance_public_ip = "15.206.147.80"
portfolio_url = "http://harshal.purvesh.cloud"
rds_endpoint = "rdstf.cjuemy0ssuvb.ap-south-1.rds.amazonaws.com:3306"
Waiting for EC2 instance to be ready...
Warning: Permanently added '15.206.147.80' (ED25519) to the list of known hosts.
Running Ansible Playbook...

PLAY [Install Docker and Deploy WordPress] *************************************

TASK [Gathering Facts] *********************************************************
[WARNING]: Platform linux on host 15.206.147.80 is using the discovered Python
interpreter at /usr/bin/python3.12, but future installation of another Python
interpreter could change the meaning of that path. See
https://docs.ansible.com/ansible-
core/2.17/reference_appendices/interpreter_discovery.html for more information.
ok: [15.206.147.80]

TASK [Update apt cache] ********************************************************
changed: [15.206.147.80]

TASK [Install required system packages] ****************************************
changed: [15.206.147.80]

TASK [Add Docker GPG apt Key] **************************************************
changed: [15.206.147.80]

TASK [Add Docker Repository] ***************************************************
changed: [15.206.147.80]

TASK [Install Docker and Docker Compose] ***************************************
changed: [15.206.147.80]

TASK [Ensure Docker service is running] ****************************************
ok: [15.206.147.80]

TASK [Add current user to docker group] ****************************************
changed: [15.206.147.80]

PLAY RECAP *********************************************************************
15.206.147.80              : ok=8    changed=6    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

Setting up WordPress...
Pseudo-terminal will not be allocated because stdin is not a terminal.
Welcome to Ubuntu 24.04.1 LTS (GNU/Linux 6.8.0-1021-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sat Mar 29 16:08:18 UTC 2025

  System load:  0.61              Processes:             112
  Usage of /:   28.2% of 8.65GB   Users logged in:       0
  Memory usage: 26%               IPv4 address for enX0: 172.31.2.194
  Swap usage:   0%


Expanded Security Maintenance for Applications is not enabled.

147 updates can be applied immediately.
47 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


Updating system and installing required packages...

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Hit:1 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble InRelease
Hit:2 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-updates InRelease
Hit:3 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-backports InRelease
Hit:4 https://download.docker.com/linux/ubuntu focal InRelease
Hit:5 http://security.ubuntu.com/ubuntu noble-security InRelease
Reading package lists...
Building dependency tree...
Reading state information...
144 packages can be upgraded. Run 'apt list --upgradable' to see them.
W: https://download.docker.com/linux/ubuntu/dists/focal/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.

WARNING: apt Reading package lists...
does not have a stable CLI interface. Use with caution in scripts.

Building dependency tree...
Reading state information...
The following additional packages will be installed:
  mysql-client-8.0 mysql-client-core-8.0 mysql-common nginx-common
  python3-acme python3-certbot python3-configargparse python3-icu
  python3-josepy python3-parsedatetime python3-rfc3339
Suggested packages:
  python-certbot-doc python3-certbot-apache fcgiwrap nginx-doc ssl-cert
  python-acme-doc python-certbot-nginx-doc
The following NEW packages will be installed:
  certbot mysql-client mysql-client-8.0 mysql-client-core-8.0 mysql-common
  nginx nginx-common python3-acme python3-certbot python3-certbot-nginx
  python3-configargparse python3-icu python3-josepy python3-parsedatetime
  python3-rfc3339
0 upgraded, 15 newly installed, 0 to remove and 144 not upgraded.
Need to get 4415 kB of archives.
After this operation, 69.1 MB of additional disk space will be used.
Get:1 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 mysql-client-core-8.0 amd64 8.0.41-0ubuntu0.24.04.1 [2727 kB]
Get:2 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/main amd64 mysql-common all 5.8+1.1.0build1 [6746 B]
Get:3 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 mysql-client-8.0 amd64 8.0.41-0ubuntu0.24.04.1 [22.4 kB]
Get:4 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 mysql-client all 8.0.41-0ubuntu0.24.04.1 [9412 B]
Get:5 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 nginx-common all 1.24.0-2ubuntu7.1 [31.2 kB]
Get:6 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble-updates/main amd64 nginx amd64 1.24.0-2ubuntu7.1 [521 kB]
Get:7 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-josepy all 1.14.0-1 [22.1 kB]
Get:8 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-rfc3339 all 1.1-4 [6744 B]
Get:9 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-acme all 2.9.0-1 [48.5 kB]
Get:10 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-configargparse all 1.7-1 [31.7 kB]
Get:11 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-parsedatetime all 2.6-3 [32.8 kB]
Get:12 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-certbot all 2.9.0-1 [267 kB]
Get:13 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 certbot all 2.9.0-1 [89.2 kB]
Get:14 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/universe amd64 python3-certbot-nginx all 2.9.0-1 [66.0 kB]
Get:15 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu noble/main amd64 python3-icu amd64 2.12-1build2 [534 kB]
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (This frontend requires a controlling tty.)
debconf: falling back to frontend: Teletype
dpkg-preconfigure: unable to re-open stdin: 
Fetched 4415 kB in 0s (53.8 MB/s)
Selecting previously unselected package mysql-client-core-8.0.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 70879 files and directories currently installed.)
Preparing to unpack .../00-mysql-client-core-8.0_8.0.41-0ubuntu0.24.04.1_amd64.deb ...
Unpacking mysql-client-core-8.0 (8.0.41-0ubuntu0.24.04.1) ...
Selecting previously unselected package mysql-common.
Preparing to unpack .../01-mysql-common_5.8+1.1.0build1_all.deb ...
Unpacking mysql-common (5.8+1.1.0build1) ...
Selecting previously unselected package mysql-client-8.0.
Preparing to unpack .../02-mysql-client-8.0_8.0.41-0ubuntu0.24.04.1_amd64.deb ...
Unpacking mysql-client-8.0 (8.0.41-0ubuntu0.24.04.1) ...
Selecting previously unselected package mysql-client.
Preparing to unpack .../03-mysql-client_8.0.41-0ubuntu0.24.04.1_all.deb ...
Unpacking mysql-client (8.0.41-0ubuntu0.24.04.1) ...
Selecting previously unselected package nginx-common.
Preparing to unpack .../04-nginx-common_1.24.0-2ubuntu7.1_all.deb ...
Unpacking nginx-common (1.24.0-2ubuntu7.1) ...
Selecting previously unselected package nginx.
Preparing to unpack .../05-nginx_1.24.0-2ubuntu7.1_amd64.deb ...
Unpacking nginx (1.24.0-2ubuntu7.1) ...
Selecting previously unselected package python3-josepy.
Preparing to unpack .../06-python3-josepy_1.14.0-1_all.deb ...
Unpacking python3-josepy (1.14.0-1) ...
Selecting previously unselected package python3-rfc3339.
Preparing to unpack .../07-python3-rfc3339_1.1-4_all.deb ...
Unpacking python3-rfc3339 (1.1-4) ...
Selecting previously unselected package python3-acme.
Preparing to unpack .../08-python3-acme_2.9.0-1_all.deb ...
Unpacking python3-acme (2.9.0-1) ...
Selecting previously unselected package python3-configargparse.
Preparing to unpack .../09-python3-configargparse_1.7-1_all.deb ...
Unpacking python3-configargparse (1.7-1) ...
Selecting previously unselected package python3-parsedatetime.
Preparing to unpack .../10-python3-parsedatetime_2.6-3_all.deb ...
Unpacking python3-parsedatetime (2.6-3) ...
Selecting previously unselected package python3-certbot.
Preparing to unpack .../11-python3-certbot_2.9.0-1_all.deb ...
Unpacking python3-certbot (2.9.0-1) ...
Selecting previously unselected package certbot.
Preparing to unpack .../12-certbot_2.9.0-1_all.deb ...
Unpacking certbot (2.9.0-1) ...
Selecting previously unselected package python3-certbot-nginx.
Preparing to unpack .../13-python3-certbot-nginx_2.9.0-1_all.deb ...
Unpacking python3-certbot-nginx (2.9.0-1) ...
Selecting previously unselected package python3-icu.
Preparing to unpack .../14-python3-icu_2.12-1build2_amd64.deb ...
Unpacking python3-icu (2.12-1build2) ...
Setting up python3-configargparse (1.7-1) ...
Setting up mysql-common (5.8+1.1.0build1) ...
update-alternatives: using /etc/mysql/my.cnf.fallback to provide /etc/mysql/my.cnf (my.cnf) in auto mode
Setting up mysql-client-core-8.0 (8.0.41-0ubuntu0.24.04.1) ...
Setting up python3-parsedatetime (2.6-3) ...
Setting up python3-icu (2.12-1build2) ...
Setting up python3-josepy (1.14.0-1) ...
Setting up mysql-client-8.0 (8.0.41-0ubuntu0.24.04.1) ...
Setting up python3-rfc3339 (1.1-4) ...
Setting up mysql-client (8.0.41-0ubuntu0.24.04.1) ...
Setting up python3-acme (2.9.0-1) ...
Setting up python3-certbot (2.9.0-1) ...
Setting up certbot (2.9.0-1) ...
Created symlink /etc/systemd/system/timers.target.wants/certbot.timer → /usr/lib/systemd/system/certbot.timer.
Setting up nginx (1.24.0-2ubuntu7.1) ...
Setting up python3-certbot-nginx (2.9.0-1) ...
Setting up nginx-common (1.24.0-2ubuntu7.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (This frontend requires a controlling tty.)
debconf: falling back to frontend: Teletype
Created symlink /etc/systemd/system/multi-user.target.wants/nginx.service → /usr/lib/systemd/system/nginx.service.
Processing triggers for ufw (0.36.2-6) ...
Processing triggers for man-db (2.12.0-4build2) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (This frontend requires a controlling tty.)
debconf: falling back to frontend: Teletype

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
Waiting for MySQL to be ready...
